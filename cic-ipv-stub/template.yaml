AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline. Mandatory if using Lambda create function permissions.
  Environment:
    Description: "The environment type"
    Type: "String"
    Default: dev
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      # - "production" EXPLICITLY CONFIGURED TO NOT GO TO PRODUCTION
    ConstraintDescription: must be dev, build, staging, or integration
  BackendStack:
    Description: The stack name of the API stack under test
    Default: cic-cri-api
    Type: String
  FrontendStack:
    Description: The stack name of the Frontend stack under test
    Default: cic-cri-front
    Type: String
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run. This should stop anyone not on the GDS VPN or internal to AWS from 
      calling this stuff.
    Default: vpc-cri
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles. Mandatory."
    Type: String
    Default: "none"

Mappings:
  Configuration:
    dev:
      IPVStubID: "5C584572"
      AUD: "https://review-c.dev.account.gov.uk"
      IPVSTUBURL: "ipvstub.review-c.dev.account.gov.uk"
    build:
      IPVStubID: "BD7B2A5D"
      AUD: "https://review-c.build.account.gov.uk"
      IPVSTUBURL: "ipvstub.review-c.build.account.gov.uk"
    staging:
      IPVStubID: "9CDA6F61"
      IPVSTUBURL: "ipvstub.review-c.staging.account.gov.uk"
    integration:
      IPVStubID: "AE140E43"
    production:
      IPVStubID: "C910A762"

  EnvironmentVariables: # This is all the environment specific environment variables that don't belong in globals.
    dev:
      DNSSUFFIX: review-c.dev.account.gov.uk
      BASEFRONTURL: "https://cic-cri-front.review-c.dev.account.gov.uk"
      BASEAPIURL: "https://api-cic-cri-api.review-c.dev.account.gov.uk"
    build:
      DNSSUFFIX: review-c.build.account.gov.uk
      BASEFRONTURL: "https://www.review-c.build.account.gov.uk"
      BASEAPIURL: "https://api.review-c.build.account.gov.uk"
    staging:
      DNSSUFFIX: review-c.staging.account.gov.uk
    integration:
      DNSSUFFIX: review-c.integration.account.gov.uk
    production:
      DNSSUFFIX: review-c.account.gov.uk

Conditions:
  CreateDevResources: !Equals
    - !Ref Environment
    - dev
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Globals:
  Function:
    Tracing: Active
    MemorySize: 512
    Runtime: nodejs20.x
    Timeout: 60
    Tags:
      API: !Sub ${AWS::StackName}-test-resource
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue

Resources:
  IPVStubLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kms:Sign
                  - kms:GetPublicKey
                Resource:
                  - !GetAtt IPVStubKMSSigningKey.Arn
                  - !GetAtt IPVStubKMSAdditionalKey.Arn
                  - !GetAtt IPVStubKMSAdditionalEncryptionKey.Arn
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:*:*:*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  IPVStubApiGw:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Sub IPVStub-${Environment}-${AWS::StackName}
      Description: !Sub "Claimed Identity Credential Issuer (CIC) IPVStub API. ${AWS::StackName}"
      Policy: >
        {"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":"*","Action":"execute-api:Invoke","Resource":["execute-api:/*"]}]}
      Parameters:
        endpointConfigurationTypes: REGIONAL

  ### Stub Custom Domain ---------------------------------------

  StubApiPrettyDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !If
        - CreateDevResources
        - !Sub
          - "${AWS::StackName}-${IPVSTUBURL}"
          - IPVSTUBURL:
              !FindInMap [ Configuration, !Ref Environment, IPVSTUBURL ]
        - !FindInMap [ Configuration, !Ref Environment, IPVSTUBURL ]

      DomainNameConfigurations:
        - CertificateArn: !Sub "{{resolve:ssm:/${Environment}/Platform/ACM/PrimaryZoneWildcardCertificateARN}}"
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  StubApiRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref StubApiPrettyDomainName
      Type: A
      HostedZoneId: !Sub "{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}"
      AliasTarget:
        DNSName: !GetAtt StubApiPrettyDomainName.RegionalDomainName
        HostedZoneId: !GetAtt StubApiPrettyDomainName.RegionalHostedZoneId
        EvaluateTargetHealth: false

  IPVStubExternalApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Ref StubApiPrettyDomainName
      ApiId: !Ref IPVStubApiGw
      Stage: !Ref Environment
    DependsOn:
      - IPVStubApiGwDeployment

  # Redirect ---------------------------------------
  RedirectPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref IPVStubApiGw
      ParentId: !GetAtt IPVStubApiGw.RootResourceId
      PathPart: redirect

  RedirectMethodGet:
    DependsOn:
      - RedirectPath
      - IPVStubRedirectFunction
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref IPVStubApiGw
      ResourceId: !Ref RedirectPath
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt IPVStubRedirectFunction.Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500

  # JWKS -----------------------------------------
  WellKnownPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref IPVStubApiGw
      ParentId: !GetAtt IPVStubApiGw.RootResourceId
      PathPart: .well-known

  JwksJSONFile:
    DependsOn:
      - WellKnownPath
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref IPVStubApiGw
      ParentId: !Ref WellKnownPath
      PathPart: jwks.json

  JwksMethodGet:
    DependsOn:
      - JwksJSONFile
      - JwksFunction
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref IPVStubApiGw
      ResourceId: !Ref JwksJSONFile
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt JwksFunction.Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500

  # Start check-----------------------------------------
  StartCICPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref IPVStubApiGw
      ParentId: !GetAtt IPVStubApiGw.RootResourceId
      PathPart: start

  StartCICMethodGet:
    DependsOn:
      - StartCICPath
      - StartCICCheckFunction
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref IPVStubApiGw
      ResourceId: !Ref StartCICPath
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt StartCICCheckFunction.Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500

  # Start token-----------------------------------------
  GenerateTokenRequestCICPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref IPVStubApiGw
      ParentId: !GetAtt IPVStubApiGw.RootResourceId
      PathPart: generate-token-request

  GenerateTokenRequestCICMethodPost:
    DependsOn:
      - GenerateTokenRequestCICPath
      - GenerateTokenRequestCICFunction
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref IPVStubApiGw
      ResourceId: !Ref GenerateTokenRequestCICPath
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ""
          - - "arn:"
            - !Ref "AWS::Partition"
            - ":apigateway:"
            - !Ref "AWS::Region"
            - ":lambda:path/2015-03-31/functions/"
            - !GetAtt GenerateTokenRequestCICFunction.Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500

  # -----------------------------------------
  IPVStubApiGwDeployment:
    DependsOn:
      - RedirectMethodGet
      - JwksMethodGet
      - StartCICMethodGet
      - GenerateTokenRequestCICMethodPost
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref IPVStubApiGw
      Description: This resource deploys an API Gateway RestApi resource to a stage so that clients can call the API over the internet
      StageName: !Sub ${Environment}
      StageDescription:
        AccessLogSetting:
          DestinationArn: !GetAtt IPVStubApiAccessLogGroup.Arn
          Format: >-
            {
            "requestId":"$context.requestId",
            "ip": "$context.identity.sourceIp",
            "requestTime":"$context.requestTime",
            "httpMethod":"$context.httpMethod",
            "path": "$context.path",
            "routeKey":"$context.routeKey",
            "status":"$context.status",
            "protocol":"$context.protocol",
            "responseLength":"$context.responseLength"
            }
        DataTraceEnabled: true
        LoggingLevel: INFO
        TracingEnabled: true

  IPVStubApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/AccessLog-IPVStubApiGateway-${AWS::StackName}/${Environment}
      RetentionInDays: 30

  # ------------------------------------
  StartCICCheckFunction:
    DependsOn:
      - StartCICCheckFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "StartCICCheckFunction-${AWS::StackName}"
      Handler: startCicCheck.handler
      CodeUri: src/
      Environment:
        Variables:
          SIGNING_KEY: !Ref IPVStubKMSSigningKey
          ADDITIONAL_SIGNING_KEY: !Ref IPVStubKMSAdditionalKey
          ADDITIONAL_ENCRYPTION_KEY: !Ref IPVStubKMSAdditionalEncryptionKey
          CLIENT_ID: !FindInMap [Configuration, !Ref Environment, IPVStubID]
          REDIRECT_URI: !If
            - CreateDevResources
            - !Sub
              - "${AWS::StackName}-${IPVSTUBURL}/redirect"
              - IPVSTUBURL:
                  !FindInMap [ Configuration, !Ref Environment, IPVSTUBURL ]
            - !FindInMap [ Configuration, !Ref Environment, IPVSTUBURL ]
          JWKS_URI: !Sub 
            - "https://${BASEAPIURL}/.well-known/jwks.json"
            - BASEAPIURL: !FindInMap [ EnvironmentVariables, !Ref Environment, BASEAPIURL ]
          OIDC_API_BASE_URI: !FindInMap [ EnvironmentVariables, !Ref Environment, BASEAPIURL ]
          OIDC_FRONT_BASE_URI: !FindInMap [ EnvironmentVariables, !Ref Environment, BASEFRONTURL ]
      Policies:
        - Statement:
            - Sid: KMSSignPolicy
              Effect: Allow
              Action:
                - kms:Sign
              Resource:
                - !GetAtt IPVStubKMSSigningKey.Arn
      Role: !GetAtt IPVStubLambdaRole.Arn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handlers/startCicCheck.ts

  StartCICCheckFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/StartCICCheckFunction-${AWS::StackName}" # Important as this is derived from the FunctionName

  StartCICCheckFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt StartCICCheckFunction.Arn
      Principal: apigateway.amazonaws.com

  # ------------------------------------
  GenerateTokenRequestCICFunction:
    DependsOn:
      - GenerateTokenRequestCICFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "GenerateTokenRequestCICFunction-${AWS::StackName}"
      Handler: generateTokenRequest.handler
      CodeUri: src/
      Environment:
        Variables:
          SIGNING_KEY: !Ref IPVStubKMSSigningKey
          ADDITIONAL_SIGNING_KEY: !Ref IPVStubKMSAdditionalKey
          JWT_AUDIENCE: !FindInMap [Configuration, !Ref Environment, AUD]
      Policies:
        - Statement:
            - Sid: KMSSignPolicy
              Effect: Allow
              Action:
                - kms:Sign
              Resource:
                - !GetAtt IPVStubKMSSigningKey.Arn
      Role: !GetAtt IPVStubLambdaRole.Arn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handlers/generateTokenRequest.ts

  GenerateTokenRequestCICFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/GenerateTokenRequestCICFunction-${AWS::StackName}"

  GenerateTokenRequestCICFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GenerateTokenRequestCICFunction.Arn
      Principal: apigateway.amazonaws.com

  #----------------------------
  JwksFunction:
    DependsOn:
      - JwksFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "IPVStubJWKS-${AWS::StackName}"
      Handler: jsonWebKeys.handler
      CodeUri: src/
      Environment:
        Variables:
          SIGNING_KEY: !Ref IPVStubKMSSigningKey
          ADDITIONAL_SIGNING_KEY: !Ref IPVStubKMSAdditionalKey
          ADDITIONAL_ENCRYPTION_KEY: !Ref IPVStubKMSAdditionalEncryptionKey
      Policies:
        - Statement:
            - Sid: KMSSignPolicy
              Effect: Allow
              Action:
                - kms:GetPublicKey
              Resource:
                - !GetAtt IPVStubKMSSigningKey.Arn
                - !GetAtt IPVStubKMSAdditionalKey.Arn
                - !GetAtt IPVStubKMSAdditionalEncryptionKey.Arn
      Role: !GetAtt IPVStubLambdaRole.Arn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handlers/jsonWebKeys.ts

  JwksFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt JwksFunction.Arn
      Principal: apigateway.amazonaws.com

  JwksFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/IPVStubJWKS-${AWS::StackName}"

  #----------------------------
  IPVStubRedirectFunction:
    DependsOn:
      - IPVStubRedirectFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "IPVStubRedirect-${AWS::StackName}"
      Handler: callback.handler
      CodeUri: src/
      Role: !GetAtt IPVStubLambdaRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - handlers/callback.ts

  IPVStubRedirectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IPVStubRedirectFunction.Arn
      Principal: apigateway.amazonaws.com

  IPVStubRedirectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/IPVStubRedirect-${AWS::StackName}"

  IPVStubKMSSigningKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A KMS Key for testing signing KMS integration in the development account.
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      MultiRegion: false
      PendingWindowInDays: 7
      Tags:
        - Key: KeyType
          Value: Test Signing Key
        - Key: Environment
          Value: !Sub ${Environment}
          
  IPVStubKMSAdditionalKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A additional valid signing key in KMS to reflect multiple JWK's returned by the 'well-known' endpoint
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      MultiRegion: false
      PendingWindowInDays: 7
      Tags:
        - Key: KeyType
          Value: Test Signing Key
        - Key: Environment
          Value: !Sub ${Environment}

  IPVStubKMSAdditionalEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A unique public encryption key not available at the CRI's /well-known/jwks.json endpoint to test scenarios where decryption fails
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: 7
      Tags:
        - Key: KeyType
          Value: Test Encryption Key
        - Key: Environment
          Value: !Sub ${Environment}

  # SSMParameter for .env variable
  ProviderBaseUri:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The Base URI from backend stack to test
      Name: !Sub "/${Environment}/${AWS::StackName}/API/PROVIDER_BASE_URI"
      Type: String
      Value: !Sub
        - "$https://${ImportProviderStack}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
        - ImportProviderStack:
            Fn::ImportValue: !Sub "${BackendStack}-CICApiGatewayId"
      Tags:
        APP: !Sub cic-${AWS::StackName}

  IPVStubId:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The ID that identifies the client
      Name: !Sub "/${Environment}/${AWS::StackName}/API/TEST_CLIENT_ID"
      Type: String
      Value: !FindInMap [Configuration, !Ref Environment, IPVStubID]
      Tags:
        APP: !Sub cic-${AWS::StackName}

  RedirectEndpointUri:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The Redirect URI
      Name: !Sub "/${Environment}/${AWS::StackName}/API/TEST_CLIENT_REDIRECT_ENDPOINT"
      Type: String
      Value: !Sub
        - "https://${testRedirectUri}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/redirect"
        - testRedirectUri: !Ref IPVStubApiGw
      Tags:
        APP: !Sub cic-${AWS::StackName}

  IPVStubSigningKey:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The Base URI from backend stack to test
      Name: !Sub "/${Environment}/${AWS::StackName}/API/TEST_CLIENT_SIGNING_KEY"
      Type: String
      Value: !Ref IPVStubKMSSigningKey
      Tags:
        APP: !Sub cic-${AWS::StackName}

  IPVStubJwksEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The Base URI from backend stack to test
      Name: !Sub "/${Environment}/${AWS::StackName}/API/TEST_CLIENT_JWKS_ENDPOINT"
      Type: String
      Value: !Sub "https://${IPVStubApiGw}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/.well-known/jwks.json"
      Tags:
        APP: !Sub cic-${AWS::StackName}

Outputs:
  IPVStubExecuteUrl:
    Description: "API Gateway endpoint URL for the environment stage"
    Value: !Sub "https://${IPVStubApiGw}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "${AWS::StackName}-IPVStubExecuteUrl"
  IPVStubApiGw:
    Description: "The ID of the API Gateway"
    Value: !Ref IPVStubApiGw
    Export:
      Name: !Sub "${AWS::StackName}-cic-cri-IPVStubApiGw"
  IPVStubPrettyApiUrl:
    Description: Pretty URL for IPV Stub
    Export:
      Name: !Sub "${AWS::StackName}-IPvStubApiGatewayPrettyUrl"
    Value: !Sub
      - "https://${URL}/"
      - URL: !Ref StubApiPrettyDomainName
