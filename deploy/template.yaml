AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Digital Identity IPV CRI CIC API"

Parameters:
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: Ensure environment variable is set to one of dev, build, staging, integration or production.
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  SecretPrefix:
    Type: String
    Default: "none"
    Description: Secrets name prefix
  VpcStackName:
    Type: String
    Default: "vpc-cri"
    Description: The name of the VPC stack deployed.
  L2DynamoStackName:
    Type: String
    Default: "cic-cri-ddb"
    Description: The name of the L2 DynamoDB stack deployed.
  L2KMSStackName:
    Type: String
    Default: "cic-cri-kms"
    Description: The name of the L2 DynamoDB stack deployed.
  PowertoolsLogLevel:
    Type: String
    Default: "INFO"
    Description: Lambda Powertools-for-Typescript Log Level
  IPVStubStackName:
    Type: String
    Default: "cic-ipv-stub"
    Description: The name of theIPV stub stack deployed.
  DeployAlarmsInDev:
    Description: "Set to the string value `true` to deploy alarms in a DEV environment"
    Type: String
    Default: false
  SupportManualURL:
    Description: "Link to the CIC support manual"
    Type: String
    Default: 'https://govukverify.atlassian.net/wiki/spaces/Kiwi/pages/4371939527/6.3+CIC+CRI+Support+Documentation'
  LambdaConcurrency:
    Description: "Reserved concurrency for Lambdas running in non-DEV environments"
    Type: Number
    Default: 20
  LambdaConcurrencyThreshold:
    Description: "Threshold for Reserved concurrency running in non-DEV environments"
    Type: Number
    Default: 16  #80% of Lambda concurrency
  ApplyReservedConcurrencyInDev:
    Description: "Set to true to apply reserved concurrency when deploying in DEV environments"
    Type: String
    Default: "false"
  LambdaDeploymentPreference:
    Description: >
      Canary strategy to be used with your Lambda applications please refer to documentation for configurations -
      https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/automating-updates-to-serverless-apps.html
    Type: String
    Default: "AllAtOnce"

Mappings:
  EnvironmentConfiguration: # This is where you store per-environment settings.
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables #pragma: allowlist secret
      logretentionindays: 30
      apiTracingEnabled: true
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables #pragma: allowlist secret
      logretentionindays: 30
      apiTracingEnabled: true
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables #pragma: allowlist secret
      logretentionindays: 30
      apiTracingEnabled: true
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables #pragma: allowlist secret
      logretentionindays: 30
      apiTracingEnabled: false
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables #pragma: allowlist secret
      logretentionindays: 30
      apiTracingEnabled: false

  PlatformConfiguration:
    dev:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
    build:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
    staging:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
    integration:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
    production:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython

  EnvironmentVariables: # This is all the environment specific environment variables that don't belong in globals.
    dev:
      ISSUER: "https://review-c.dev.account.gov.uk"
      DNSSUFFIX: review-c.dev.account.gov.uk
      KEYROTATIONENABLED: true
      CLIENTS: 
        '[{
          "jwksEndpoint": "https://cic-ipv-stub-ipvstub.review-c.dev.account.gov.uk/.well-known/jwks.json",
          "clientId": "5C584572",
          "redirectUri": "https://cic-ipv-stub-ipvstub.review-c.dev.account.gov.uk/redirect"
        }]'
      TXMAMESSAGERETENTIONPERIODDAYS: 604800 # Default: 7 days
      AUTHSESSIONTTL: "86400" # 1 day in seconds
      TESTHARNESSURL: "https://cic-test-harness-testharness.review-c.dev.account.gov.uk/"
    build:
      ISSUER: "https://review-c.build.account.gov.uk"
      DNSSUFFIX: review-c.build.account.gov.uk
      KEYROTATIONENABLED: true
      CLIENTS: 
        '[{
          "jwksEndpoint": "https://ipvstub.review-c.build.account.gov.uk/.well-known/jwks.json",
          "clientId": "BD7B2A5D",
          "redirectUri": "https://ipvstub.review-c.build.account.gov.uk/redirect"
        }]'
      TXMAMESSAGERETENTIONPERIODDAYS: 604800 # Default: 7 days
      AUTHSESSIONTTL: "950400" # 11 days in seconds
      TESTHARNESSURL: "https://testharness.review-c.build.account.gov.uk"
    staging:
      ISSUER: "https://review-c.staging.account.gov.uk"
      DNSSUFFIX: review-c.staging.account.gov.uk
      KEYROTATIONENABLED: true
      CLIENTS: 
        '[{
          "jwksEndpoint":"https://api.identity.staging.account.gov.uk/.well-known/jwks.json",
          "clientId":"03A5A659-17AA-453F-B905-95D2804823D1",
          "redirectUri":"https://identity.staging.account.gov.uk/credential-issuer/callback?id=claimedIdentity"
        }]'
      TXMAMESSAGERETENTIONPERIODDAYS: 604800 # Default: 7 days
      AUTHSESSIONTTL: "950400" # 11 days in seconds
    integration:
      ISSUER: "https://review-c.integration.account.gov.uk"
      DNSSUFFIX: review-c.integration.account.gov.uk
      KEYROTATIONENABLED: true
      CLIENTS: 
        '[{
          "jwksEndpoint":"https://api.identity.integration.account.gov.uk/.well-known/jwks.json", 
          "clientId":"AE140E43-1987-4EE8-86CC-BEF19FC9FF3F", 
          "redirectUri":"https://identity.integration.account.gov.uk/credential-issuer/callback?id=claimedIdentity"
        }]'
      TXMAMESSAGERETENTIONPERIODDAYS: 604800 # Default: 7 days
      AUTHSESSIONTTL: "950400" # 11 days in seconds
    production:
      ISSUER: "https://review-c.account.gov.uk"
      DNSSUFFIX: review-c.account.gov.uk
      KEYROTATIONENABLED: true
      CLIENTS: 
        '[{
          "jwksEndpoint":"https://api.identity.account.gov.uk/.well-known/jwks.json", 
          "clientId":"C910A762-4BB2-400D-8F3D-4D7E6C84E342", 
          "redirectUri":"https://identity.account.gov.uk/credential-issuer/callback?id=claimedIdentity"
        }]'
      TXMAMESSAGERETENTIONPERIODDAYS: 604800 # Default: 7 days
      AUTHSESSIONTTL: "950400" # 11 days in seconds
  TxMAAccounts:
    # EVENTS is used to egress to TxMA.
    dev:
      AUDIT: arn:aws:iam::725018305812:root
      EVENTS: arn:aws:iam::248098332657:root
    build:
      AUDIT: arn:aws:iam::761029721660:root
      EVENTS: arn:aws:iam::750703655225:root
    staging:
      AUDIT: arn:aws:iam::778587367904:root
      EVENTS: arn:aws:iam::178023842775:root
    integration:
      AUDIT: arn:aws:iam::423448613278:root
      EVENTS: arn:aws:iam::729485541398:root
    production:
      AUDIT: arn:aws:iam::348043515437:root
      EVENTS: arn:aws:iam::451773080033:root

Conditions:
  CreateDevResources: !Equals
    - !Ref Environment
    - dev
  IsProdLikeEnvironment: !Or
    - !Equals [!Ref Environment, staging]
    - !Equals [!Ref Environment, integration]
    - !Equals [!Ref Environment, production]
  IsNotProdLikeEnvironment: !Not
    - !Condition IsProdLikeEnvironment
  IsPersonalIdentifiableInformationEnvironment: !Or
    - !Equals [!Ref Environment, integration]
    - !Equals [!Ref Environment, production]
  IsNotDevelopment: !Or
    - !Equals [ !Ref Environment, build ]
    - !Equals [ !Ref Environment, staging ]
    - !Equals [ !Ref Environment, integration ]
    - !Equals [ !Ref Environment, production ]
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  UseSecretPrefix:
    Fn::Not:
      - Fn::Equals:
          - !Ref SecretPrefix
          - "none"
  DeployAlarms: !Or
    - Condition: IsNotDevelopment
    - !Equals [!Ref DeployAlarmsInDev, true]
  ApplyReservedConcurrency: !Or
    - Condition: IsNotDevelopment
    - !Equals [!Ref ApplyReservedConcurrencyInDev, true]
  UseCanaryDeploy:
    Fn::Or:
      - Fn::Equals: [ !Ref Environment, "dev" ]
      - Fn::Equals: [ !Ref Environment, "build" ]

Globals:
  Function:
    Runtime: nodejs20.x
    VpcConfig:
      SecurityGroupIds:
        - !GetAtt LambdaEgressSecurityGroup.GroupId
      SubnetIds:
        - Fn::ImportValue:
            "Fn::Sub": "${VpcStackName}-ProtectedSubnetIdA"
        - Fn::ImportValue:
            "Fn::Sub": "${VpcStackName}-ProtectedSubnetIdB"
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Layers:
      - !Sub
        - '{{resolve:secretsmanager:${SecretArn}:SecretString:NODEJS_LAYER}}' #pragma: allowlist secret # or PYTHON_LAYER or JAVA_LAYER
        - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
    Timeout: 30 # seconds
    Tracing: Active
    MemorySize: 1024
    Architectures:
      - arm64
    Environment:
      Variables:
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}' #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_CONNECTION_BASE_URL: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}' #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_CLUSTER_ID: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}' #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}' #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_TENANT: !Sub
          - '{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}' #pragma: allowlist secret
          - SecretArn: !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: "true"
        # These should always be alphabetically organised.
        AWS_STACK_NAME: !Sub ${AWS::StackName} # The AWS Stack Name, as passed into the template.
        POWERTOOLS_LOG_LEVEL: !Ref PowertoolsLogLevel # The LogLevel for the AWS PowerTools LogHelper
        POWERTOOLS_METRICS_NAMESPACE: CIC-CRI # The Metric Namespace for the AWS PowerTools MetricHelper
        ISSUER: !FindInMap [EnvironmentVariables, !Ref Environment, ISSUER]
        SESSION_TABLE:
          Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        TXMA_QUEUE_URL: !Ref TxMASQSQueue
        REGION: !Sub "${AWS::Region}"
        SECRET_PREFIX: !If [
            UseSecretPrefix,
            !Ref SecretPrefix,
            !Ref AWS::StackName,
          ] # What is this? @TODO
        SQS_AUDIT_EVENT_PREFIX: CIC-F2F # The prefix to add to TxMA event messages
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: !Ref LambdaDeploymentPreference
      Role: !GetAtt LambdaDeployRole.Arn
      Alarms:
        Fn::If:
          - DeployAlarms
          - - !Ref 5XXErrorAlarm
            - !Ref 5XXErrorCriticalAlarm
          - - !Ref "AWS::NoValue"

Resources:
  # Log metric filter and alarm for S3 bucket policy changes
  S3BucketActivityEventMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref SessionFunctionLogGroup
      FilterPattern: '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: S3BucketActivityEventChanges

  S3BucketActivityEventErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-S3Bucket-changes"
      AlarmDescription: !Sub "A CloudWatch Alarm that triggers when changes are made to S3 Bucket ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: S3BucketActivityEventChanges
      Namespace: AWS/S3
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  # Log metric filter and alarm for changes to network gateways
  InternetGatewayEventMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Condition: "DeployAlarms"
    Properties: 
      LogGroupName: !Ref SessionFunctionLogGroup
      FilterPattern: '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: IGatewayActivityEvent

  InternetGatewayActivityEventErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties: 
      AlarmName: !Sub "${AWS::StackName}-IGW-changes"
      AlarmDescription: !Sub "Triggers CloudWatch Alarm when changes are made to an Internet Gateway in a VPC ${SupportManualURL}"
      MetricName: IGatewayActivityEvent
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: '1'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      TreatMissingData: notBreaching

  # Log metric filter and alarm for route table changes
  RouteTableChangesMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref SessionFunctionLogGroup
      FilterPattern: '{ ($.eventName = AssociateRouteTable) || ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DeleteRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DisassociateRouteTable) }'
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: VPCRouteTableEvent
  RouteTableChangesEventErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-vpc-route-changes"
      AlarmDescription: !Sub "A CloudWatch Alarm that triggers when changes are made to a VPC's Route Table ${SupportManualURL}"
      MetricName: VpcRouteTableEvent
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      TreatMissingData: notBreaching

  # Log metric filter and alarm when changes are made to VPC.
  VpcChangesEventMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref SessionFunctionLogGroup
      FilterPattern: '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: VpcEventChanges
  VpcChangesEventAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-vpc-changes"
      AlarmDescription: !Sub "A CloudWatch Alarm that triggers when changes are made to a VPC ${SupportManualURL}"
      MetricName: VpcEventChanges
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      TreatMissingData: notBreaching

  # Log metric and alarm when changes are made to AWS Organisations.
  OrganisationChangesEventMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref SessionFunctionLogGroup
      FilterPattern: '{ ($.eventSource = organizations.amazonaws.com) && (($.eventName = AcceptHandshake) || ($.eventName = AttachPolicy) || ($.eventName = CreateAccount) || ($.eventName = CreateOrganizationalUnit) || ($.eventName = CreatePolicy) || ($.eventName = DeclineHandshake) || ($.eventName = DeleteOrganization) || ($.eventName = DeleteOrganizationalUnit) || ($.eventName = DeletePolicy) || ($.eventName = DetachPolicy) || ($.eventName = DisablePolicyType) || ($.eventName = EnablePolicyType) || ($.eventName = InviteAccountToOrganization) || ($.eventName = LeaveOrganization) || ($.eventName = MoveAccount) || ($.eventName = RemoveAccountFromOrganization) || ($.eventName = UpdatePolicy) || ($.eventName = UpdateOrganizationalUnit)) }'
      MetricTransformations:
        - MetricValue: '1'
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: OrganisationsEventChange
  OrganisationChangesEventAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-organisations-changes"
      AlarmDescription: !Sub "A CloudWatch Alarm that triggers when changes are made to AWS Organisations ${SupportManualURL}"
      MetricName: OrganisationsEventChange
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: '1'
      Threshold: '1'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      TreatMissingData: notBreaching

  LambdaEgressSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Permits outbound on port 443 from within the VPC to the internet.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow to the wider internet on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  JsonWebKeysBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-jwks-${Environment}
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  JWKSBucketRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: AccessJWKSjson
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:Get*"
                Resource:
                  - !Sub "arn:aws:s3:::${JsonWebKeysBucket}/.well-known/jwks.json"
              - Effect: Allow
                Action:
                  - "s3:Get*"
                Resource:
                  - !Sub "arn:aws:s3:::govuk-one-login-cic-published-keys-${Environment}/jwks.json"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Tags:
        - Key: key_consumer_type
          Value: manage

  LambdaDeployRole:
    Type: AWS::IAM::Role
    # checkov:skip=CKV_AWS_111: "Ensure IAM policies does not allow write access without constraints
    # The network interface permissions can only be applied at the '*' resource level
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.eu-west-2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda"

  ### Start of API Gateway definition.

  CICRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      AlwaysDeploy: true
      OpenApiVersion: 3.0.1
      AccessLogSetting:
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength",
          "responseLatency":"$context.responseLatency",
          "integrationLatency":"$context.integrationLatency"
          }
        DestinationArn: !GetAtt CICAPIGatewayAccessLogGroup.Arn
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "./cic-spec.yaml"
        OpenApiVersion: 3.0.1

      TracingEnabled: true
      MethodSettings:
        - LoggingLevel: INFO
          MetricsEnabled: true
          ThrottlingBurstLimit: 400
          ThrottlingRateLimit: 200
          # Disable data trace in production and integration to avoid logging customer sensitive information
          DataTraceEnabled: !If
            - IsPersonalIdentifiableInformationEnvironment
            - false
            - true
          HttpMethod: "*"
          ResourcePath: "/*"
      Tags:
        Product: GOV.UK Sign In
        System: CIC
        Environment: !Ref Environment
        Service: backend
        Name: CICRestApi
        Source: alphagov/di-devplatform-demo-sam-app/sam-app/template.yaml
        FMSRegionalPolicy: false
        CustomPolicy: true

  CICAPIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]
      # KmsKeyId: !GetAtt HelloWorldKmsKey.Arn
      Tags:
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Dev Platform
        - Key: Environment
          Value: Demo
        - Key: Service
          Value: backend
        - Key: Name
          Value: APIGatewayAccessLogGroup

  CICAPIGatewayFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref CICAPIGatewayAccessLogGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "CICAPIGateway-Fatalerror"

  CICAPIGatewayFatalErrorAlarm:
    DependsOn:
      - "CICAPIGatewayFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-CICAPIGateway-FatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: CICAPIGateway-Fatalerror
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  ### End of API Gateway definition.

  ### API Gateway Custom Domain definition
  WAFv2ACLAssociation:
    #Condition: IsNotDevelopment
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${CICRestApi}/stages/${CICRestApi.Stage}"
      WebACLArn: !Sub "{{resolve:ssm:/${Environment}/Platform/Security/Block/WafArn}}"

  CICApiCustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !If
        - CreateDevResources
        - !Sub
          - "api-${AWS::StackName}.${DNSSUFFIX}"
          - DNSSUFFIX:
              !FindInMap [ EnvironmentVariables, !Ref Environment, DNSSUFFIX ]
        - !Sub
          - "api.${DNSSUFFIX}"
          - DNSSUFFIX:
             !FindInMap [ EnvironmentVariables, !Ref Environment, DNSSUFFIX ]
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Sub "{{resolve:ssm:/${Environment}/Platform/ACM/PrimaryZoneWildcardCertificateARN}}"
      SecurityPolicy: TLS_1_2

  CICApiCertificateRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref CICApiCustomDomainName
      Type: A
      HostedZoneId: !Sub "{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}"
      AliasTarget:
        DNSName: !GetAtt CICApiCustomDomainName.RegionalDomainName
        HostedZoneId: !GetAtt CICApiCustomDomainName.RegionalHostedZoneId

  CICApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: "CICApiCustomDomainName"
    Properties:
      DomainName: !Ref CICApiCustomDomainName
      RestApiId: !Ref CICRestApi
      Stage: !Sub "${CICRestApi.Stage}"

  ### End of API Gateway Custom Domain definition

  ### Function Definition

  # ClaimedIdentity
  ClaimedIdentityFunction:
    Type: AWS::Serverless::Function
    DependsOn: ClaimedIdentityFunctionLogGroup
    Properties:
      FunctionName: !Sub "CIC-ClaimedIdentity-${AWS::StackName}"
      Handler: ClaimedIdentityHandler.lambdaHandler
      CodeUri: ../src/
      ReservedConcurrentExecutions: !If
        - ApplyReservedConcurrency
        - !Ref LambdaConcurrency
        - !Ref AWS::NoValue
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: ClaimedIdHandler
          # SESSION_TABLE:
          #   Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
          PERSON_IDENTITY_TABLE_NAME:
            Fn::ImportValue: !Sub "${L2DynamoStackName}-person-identity-table-name"

      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-person-identity-table-name"
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-key-id"
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-person-identity-table-key-id"

      Events:
        claimedIdentity:
          Type: Api
          Properties:
            Path: /claimedIdentity
            Method: post
            RestApiId: !Ref CICRestApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - ClaimedIdentityHandler.ts

  ClaimedIdentityFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/CIC-ClaimedIdentity-${AWS::StackName}"
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]

  ClaimedIdentityFunctionLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    # Condition: IsProdLikeEnvironment
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref ClaimedIdentityFunctionLogGroup

  ClaimedIdentityFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ClaimedIdentityFunction
      Principal: apigateway.amazonaws.com

  ClaimedIdentityFunctionFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref ClaimedIdentityFunctionLogGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "ClaimedIdentityFunction-Fatalerror"

  ClaimedIdentityFunctionFatalErrorAlarm:
    DependsOn:
      - "ClaimedIdentityFunctionFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ClaimedIdentityFunction-FatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: ClaimedIdentityFunction-Fatalerror
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  ## UserInfo
  UserInfoFunction:
    Type: AWS::Serverless::Function
    DependsOn: UserInfoFunctionLogGroup
    Properties:
      FunctionName: !Sub "User-Info-${AWS::StackName}"
      Handler: UserInfoHandler.lambdaHandler
      CodeUri: ../src/
      ReservedConcurrentExecutions: !If
        - ApplyReservedConcurrency
        - !Ref LambdaConcurrency
        - !Ref AWS::NoValue
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: UserInfoHandler
          # SESSION_TABLE:
          #   Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
          PERSON_IDENTITY_TABLE_NAME:
            Fn::ImportValue: !Sub "${L2DynamoStackName}-person-identity-table-name"
          KMS_KEY_ARN:
            Fn::ImportValue: !Sub "${L2KMSStackName}-vc-signing-key"
          DNSSUFFIX: !FindInMap [ EnvironmentVariables, !Ref Environment, DNSSUFFIX ]
          TXMA_QUEUE_URL: !Ref TxMASQSQueue
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-person-identity-table-name"
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-key-id"
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-person-identity-table-key-id"
        - Statement:
            - Sid: KMSPolicy
              Effect: Allow
              Action:
                - kms:Verify
                - kms:Sign
              Resource:
                Fn::ImportValue: !Sub "${L2KMSStackName}-vc-signing-key"
        - Statement:
            - Effect: Allow
              Action:
                - "sqs:SendMessage"
              Resource: !GetAtt TxMASQSQueue.Arn
            - Effect: Allow
              Action:
                - "kms:Encrypt"
                - "kms:Decrypt"
                - "kms:GenerateDataKey"
              Resource: !GetAtt TxMAKMSEncryptionKey.Arn
      Events:
        userInfo:
          Type: Api
          Properties:
            Path: /userinfo
            Method: post
            RestApiId: !Ref CICRestApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - UserInfoHandler.ts

  UserInfoFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/User-Info-${AWS::StackName}"
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]

  UserInfoFunctionLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    # Condition: IsProdLikeEnvironment
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref UserInfoFunctionLogGroup

  UserInfoFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UserInfoFunction
      Principal: apigateway.amazonaws.com

  UserInfoFunctionFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref UserInfoFunctionLogGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "UserInfoFunction-Fatalerror"

  UserInfoFunctionFatalErrorAlarm:
    DependsOn:
      - "UserInfoFunctionFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-UserInfoFunction-FatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: UserInfoFunction-Fatalerror
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  # SessionHandler
  SessionFunction:
    Type: AWS::Serverless::Function
    DependsOn: SessionFunctionLogGroup
    Properties:
      FunctionName: !Sub "CIC-Session-${AWS::StackName}"
      Handler: SessionHandler.lambdaHandler
      ReservedConcurrentExecutions: !If
        - ApplyReservedConcurrency
        - !Ref LambdaConcurrency
        - !Ref AWS::NoValue
      CodeUri: ../src/
      Environment:
        Variables:
          AUTH_SESSION_TTL:
            !FindInMap [EnvironmentVariables, !Ref Environment, AUTHSESSIONTTL]
          POWERTOOLS_SERVICE_NAME: SessionHandler
          # SESSION_TABLE:
          #   Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
          PERSON_IDENTITY_TABLE_NAME:
            Fn::ImportValue: !Sub "${L2DynamoStackName}-person-identity-table-name"
          KMS_KEY_ARN:
            Fn::ImportValue: !Sub "${L2KMSStackName}-vc-signing-key"
          TXMA_QUEUE_URL: !Ref TxMASQSQueue
          CLIENT_CONFIG:
            !FindInMap [EnvironmentVariables, !Ref Environment, CLIENTS]
          ENCRYPTION_KEY_IDS:
            Fn::ImportValue: !Sub "${L2KMSStackName}-encryption-key"
          KEY_ROTATION_ENABLED:
            !FindInMap [EnvironmentVariables, !Ref Environment, KEYROTATIONENABLED]
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-person-identity-table-name"
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-key-id"
        - Statement:
            - Sid: KMSPolicy
              Effect: Allow
              Action:
                - kms:*
              Resource:
                "*"
                #Fn::ImportValue: !Sub "${L2KMSStackName}-vc-signing-key"
              #Resource: !Sub "arn:aws:kms:eu-west-2:060113405249:key/ff437a51-ec7e-4118-9c95-7b0bb2856836"
        - Statement:
            - Effect: Allow
              Action:
                - "sqs:SendMessage"
              Resource: !GetAtt TxMASQSQueue.Arn
            - Effect: Allow
              Action:
                - "kms:Encrypt"
                - "kms:Decrypt"
                - "kms:GenerateDataKey"
              Resource: !GetAtt TxMAKMSEncryptionKey.Arn
      Events:
        session:
          Type: Api
          Properties:
            Path: /session
            Method: post
            RestApiId: !Ref CICRestApi

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - SessionHandler.ts

  SessionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/CIC-Session-${AWS::StackName}"
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]

  SessionFunctionLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    # Condition: IsProdLikeEnvironment
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref SessionFunctionLogGroup

  SessionFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SessionFunction
      Principal: apigateway.amazonaws.com

  SessionFunctionFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref SessionFunctionLogGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "SessionFunction-Fatalerror"

  SessionFunctionFatalErrorAlarm:
    DependsOn:
      - "SessionFunctionFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-SessionFunction-FatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: SessionFunction-Fatalerror
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  ## AccessToken
  TokenFunction:
    Type: AWS::Serverless::Function
    DependsOn: TokenFunctionLogGroup
    Properties:
      FunctionName: !Sub "Access-Token-${AWS::StackName}"
      Handler: AccessTokenHandler.lambdaHandler
      CodeUri: ../src/
      ReservedConcurrentExecutions: !If
        - ApplyReservedConcurrency
        - !Ref LambdaConcurrency
        - !Ref AWS::NoValue
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: AccessTokenHandler
          # SESSION_TABLE:
          #   Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
          KMS_KEY_ARN:
            Fn::ImportValue: !Sub "${L2KMSStackName}-vc-signing-key"
          DNSSUFFIX: !FindInMap [ EnvironmentVariables, !Ref Environment, DNSSUFFIX ]
          CLIENT_CONFIG: !FindInMap [ EnvironmentVariables, !Ref Environment, CLIENTS ]
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-key-id"
        - Statement:
            - Sid: KMSPolicy
              Effect: Allow
              Action:
                - kms:Sign
              Resource:
                Fn::ImportValue: !Sub "${L2KMSStackName}-vc-signing-key"
      Events:
        userInfo:
          Type: Api
          Properties:
            Path: /token
            Method: post
            RestApiId: !Ref CICRestApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - AccessTokenHandler.ts

  TokenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/Access-Token-${AWS::StackName}"
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]

  TokenFunctionLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    # Condition: IsProdLikeEnvironment
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref TokenFunctionLogGroup

  TokenFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TokenFunction
      Principal: apigateway.amazonaws.com

  TokenFunctionFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref TokenFunctionLogGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "TokenFunction-Fatalerror"

  TokenFunctionFatalErrorAlarm:
    DependsOn:
      - "TokenFunctionFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-TokenFunction-FatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: TokenFunction-Fatalerror
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  AuthorizationFunction:
    Type: AWS::Serverless::Function
    DependsOn: AuthorizationFunctionLogGroup
    Properties:
      FunctionName: !Sub "CIC-Authorization-${AWS::StackName}"
      Handler: AuthorizationCodeHandler.lambdaHandler
      CodeUri: ../src/
      ReservedConcurrentExecutions: !If
        - ApplyReservedConcurrency
        - !Ref LambdaConcurrency
        - !Ref AWS::NoValue
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: AuthorizationCodeHandler
          # SESSION_TABLE:
          #   Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
          TXMA_QUEUE_URL: !Ref TxMASQSQueue
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-key-id"
        - Statement:
            - Effect: Allow
              Action:
                - "sqs:SendMessage"
              Resource: !GetAtt TxMASQSQueue.Arn
            - Effect: Allow
              Action:
                - "kms:Encrypt"
                - "kms:Decrypt"
                - "kms:GenerateDataKey"
              Resource: !GetAtt TxMAKMSEncryptionKey.Arn
      Events:
        authorization:
          Type: Api
          Properties:
            Path: /authorization
            Method: get
            RestApiId: !Ref CICRestApi

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - AuthorizationCodeHandler.ts

  AuthorizationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/CIC-Authorization-${AWS::StackName}"
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]

  AuthorizationFunctionLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    # Condition: IsProdLikeEnvironment
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref AuthorizationFunctionLogGroup

  AuthorizationFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizationFunction
      Principal: apigateway.amazonaws.com

  AuthorizationFunctionFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref AuthorizationFunctionLogGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "AuthorizationFunction-Fatalerror"

  AuthorizationFunctionFatalErrorAlarm:
    DependsOn:
      - "AuthorizationFunctionFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-AuthorizationFunction-FatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: AuthorizationFunction-Fatalerror
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  TxMASQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod:
        !FindInMap [
          EnvironmentVariables,
          !Ref Environment,
          TXMAMESSAGERETENTIONPERIODDAYS,
        ]
      VisibilityTimeout: 60
      KmsMasterKeyId: !Ref TxMAKeyAlias
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "TxMASQSQueueDeadLetterQueue"
            - "Arn"
        maxReceiveCount: 5

  TxMASQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TxMASQSQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:ChangeMessageVisibility"
              - "sqs:ReceiveMessage"
            Resource:
              - !GetAtt TxMASQSQueue.Arn
            Principal:
              AWS:
                - !FindInMap [TxMAAccounts, !Ref Environment, EVENTS]

  TxMASQSQueueDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 259200 # three days
      KmsMasterKeyId: !Sub TxMAKMSEncryptionKey

  TxMAKMSEncryptionKey:
    Type: AWS::KMS::Key
    # KMS Key manually rotated.
    # checkov:skip=CKV_AWS_7: KMS Key manually rotated.
    Properties:
      Description: A KMS Key for encrypting the SQS Queue for TxMA
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              AWS: !FindInMap [TxMAAccounts, !Ref Environment, EVENTS]
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource:
              - "*"
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: 7
      Tags:
        - Key: KeyType
          Value: Encryption Key
        - Key: Environment
          Value: !Sub ${Environment}

  TxMAKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !If
        - CreateDevResources
        - !Sub "alias/TxMAKMSEncryptionKey-${AWS::StackName}"
        - alias/TxMAKMSEncryptionKey
      TargetKeyId: !Ref TxMAKMSEncryptionKey

  JsonWebKeysFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "JsonWebKeysLogGroup"
    Properties:
      FunctionName: !Sub "JsonWebKeys-${AWS::StackName}"
      CodeUri: ../src/
      Handler: JwksHandler.lambdaHandler
      ReservedConcurrentExecutions: !If
        - ApplyReservedConcurrency
        - !Ref LambdaConcurrency
        - !Ref AWS::NoValue
      Policies:
        - AWSXRayDaemonWriteAccess
        - S3ReadPolicy:
            BucketName: !Ref JsonWebKeysBucket
        - S3WritePolicy:
            BucketName: !Ref JsonWebKeysBucket
        - S3ReadPolicy:
            BucketName: !Sub "govuk-one-login-cic-published-keys-${Environment}"
        - S3WritePolicy:
            BucketName: !Sub "govuk-one-login-cic-published-keys-${Environment}"
        - Statement:
            - Sid: KMSSignPolicy
              Effect: Allow
              Action:
                - kms:GetPublicKey
              Resource:
                - Fn::ImportValue: !Sub "${L2KMSStackName}-vc-signing-key"
                - Fn::ImportValue: !Sub "${L2KMSStackName}-encryption-key"
      Tags:
        key_consumer_type: manage
      # Disabled as CIC CRI now uses keys published by key rotation on the ./well-known e/p
      # Events:
      #   InvocationLevel:
      #     Type: Schedule
      #     Properties:
      #       Schedule: cron(0 * * * ? *)

      Environment:
        Variables:
          JWKS_BUCKET_NAME: !Ref JsonWebKeysBucket
          PUBLISHED_KEYS_BUCKET_NAME: !Sub "govuk-one-login-cic-published-keys-${Environment}"
          BACKEND_URL: !Sub "https://api-${AWS::StackName}.review-c.${Environment}.account.gov.uk"
          SIGNING_KEY_IDS:
            Fn::ImportValue: !Sub "${L2KMSStackName}-vc-signing-key"
          ENCRYPTION_KEY_IDS:
            Fn::ImportValue: !Sub "${L2KMSStackName}-encryption-key"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - JwksHandler.ts

  JsonWebKeysLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/JsonWebKeys-${AWS::StackName}"
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]

  JsonWebKeysFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt JsonWebKeysFunction.Arn
      Principal: events.amazonaws.com

  JsonWebKeysFunctionFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref JsonWebKeysLogGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "JsonWebKeysFunction-Fatalerror"

  JsonWebKeysFunctionFatalErrorAlarm:
    DependsOn:
      - "JsonWebKeysFunctionFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-JsonWebKeysFunction-FatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: JsonWebKeysFunction-Fatalerror
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
  
  SessionConfigFunction:
    Type: AWS::Serverless::Function
    DependsOn: SessionConfigFunctionLogGroup
    Properties:
      FunctionName: !Sub "CIC-SessionConfig-${AWS::StackName}"
      Handler: SessionConfigHandler.lambdaHandler
      CodeUri: ../src/
      ReservedConcurrentExecutions: !If
        - ApplyReservedConcurrency
        - !Ref LambdaConcurrency
        - !Ref AWS::NoValue
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: SessionConfigHandler
          # SESSION_TABLE:
          #   Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBWritePolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-key-id"
      Events:
        sessionconfig:
          Type: Api
          Properties:
            Path: /session-config
            Method: get
            RestApiId: !Ref CICRestApi

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - SessionConfigHandler.ts

  SessionConfigFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/CIC-SessionConfig-${AWS::StackName}"
      RetentionInDays:
        !FindInMap [
          EnvironmentConfiguration,
          !Ref Environment,
          logretentionindays,
        ]

  SessionConfigFunctionLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    # Condition: IsProdLikeEnvironment
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref SessionConfigFunctionLogGroup

  SessionConfigFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SessionConfigFunction
      Principal: apigateway.amazonaws.com

  SessionConfigFunctionFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: "DeployAlarms"
    Properties:
      LogGroupName: !Ref SessionConfigFunctionLogGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "SessionConfigFunction-Fatalerror"

  SessionConfigFunctionFatalErrorAlarm:
    DependsOn:
      - "SessionConfigFunctionFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-SessionConfigFunction-FatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: SessionConfigFunction-Fatalerror
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  AbortFunction:
    Type: AWS::Serverless::Function
    DependsOn: AbortLogGroup
    Properties:
      FunctionName: !Sub "CIC-Abort-${AWS::StackName}"
      Handler: AbortHandler.lambdaHandler
      CodeUri: ../src/
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: AbortHandler
          ISSUER: !FindInMap [EnvironmentVariables, !Ref Environment, ISSUER]
          TXMA_QUEUE_URL: !Ref TxMASQSQueue
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXrayWriteOnlyAccess
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue:
                !Sub "${L2DynamoStackName}-session-table-name"
        - DynamoDBWritePolicy:
            TableName: !ImportValue
              Fn::Sub: "${L2DynamoStackName}-session-table-name"
        - KMSDecryptPolicy:
            KeyId:
              Fn::ImportValue:
                !Sub "${L2DynamoStackName}-session-table-key-id"
        - Statement:
            - Effect: Allow
              Action:
                - "sqs:SendMessage"
              Resource: !GetAtt [TxMASQSQueue, Arn]
            - Effect: Allow
              Action:
                - "kms:Encrypt"
                - "kms:Decrypt"
                - "kms:GenerateDataKey"
              Resource: !GetAtt [TxMAKMSEncryptionKey, Arn]
      Events:
        documentSelection:
          Type: Api
          Properties:
            Path: /abort
            Method: post
            RestApiId: !Ref CICRestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints:
          - AbortHandler.ts

  AbortLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/CIC-Abort-${AWS::StackName}"
      RetentionInDays: !FindInMap [ EnvironmentConfiguration, !Ref Environment, logretentionindays ]

  AbortLogsSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref AbortLogGroup

  AbortPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AbortFunction
      Principal: apigateway.amazonaws.com

# Alarms
# BackEnd5xxAlarms

  5XXErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-5XXErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 5XX errors on the backend api-gateway. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
            Period: 60
            Stat: Sum

  5XXErrorCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-5XXErrorCriticalAlarm"
      AlarmDescription: !Sub "There has been a significant proportion of 5XX errors on the backend api-gateway. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
            Period: 60
            Stat: Sum

  UserInfo5XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-UserInfo5XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 5XX errors on the userInfo endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /userInfo
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /userinfo
            Period: 60
            Stat: Sum

  UserInfo5XXApiGwErrorCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-UserInfo5XXApiGwErrorCriticalAlarm"
      AlarmDescription: !Sub "There has been a significant proportion of 5XX errors on the userInfo endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /userInfo
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /userinfo
            Period: 60
            Stat: Sum

  Token5XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Token5XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 5XX errors on the Token endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Resource
                  Value: /token
                - Name: Stage
                  Value: !Ref Environment
                - Name: Method
                  Value: POST
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Resource
                  Value: /token
                - Name: Stage
                  Value: !Ref Environment
                - Name: Method
                  Value: POST
            Period: 60
            Stat: Sum

  Token5XXApiGwErrorCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Token5XXApiGwErrorCriticalAlarm"
      AlarmDescription: !Sub "There has been a significant proportion of 5XX errors on the Token endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Resource
                  Value: /token
                - Name: Stage
                  Value: !Ref Environment
                - Name: Method
                  Value: POST
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Resource
                  Value: /token
                - Name: Stage
                  Value: !Ref Environment
                - Name: Method
                  Value: POST
            Period: 60
            Stat: Sum

  Authorization5XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Authorization5XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 5XX errors on the authorization endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /authorization
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /authorization
            Period: 60
            Stat: Sum

  Authorization5XXApiGwErrorCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Authorization5XXApiGwErrorCriticalAlarm"
      AlarmDescription: !Sub "There has been a significant proportion of 5XX errors on the authorization endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /authorization
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /authorization
            Period: 60
            Stat: Sum
  
  SessionConfig5XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-SessionConfig5XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 5XX errors on the session-config endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "cic-cri-${AWS::StackName}"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session-config
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "cic-cri-${AWS::StackName}"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session-config
            Period: 60
            Stat: Sum

  SessionConfig5XXApiGwErrorCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-SessionConfig5XXApiGwErrorCriticalAlarm"
      AlarmDescription: !Sub "There has been a significant proportion of 5XX errors on the session-config endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "cic-cri-${AWS::StackName}"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session-config
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "cic-cri-${AWS::StackName}"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session-config
            Period: 60
            Stat: Sum

  ClaimedIdentity5XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ClaimedIdentity5XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 5XX errors on the Claimed Identity endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /claimedIdentity
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /claimedIdentity
            Period: 60
            Stat: Sum

  ClaimedIdentity5XXApiGwErrorCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ClaimedIdentity5XXApiGwErrorCriticalAlarm"
      AlarmDescription: !Sub "There has been a significant proportion of 5XX errors on the Claimed Identity endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /claimedIdentity
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /claimedIdentity
            Period: 60
            Stat: Sum

  Session5XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Session5XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 5XX errors on the Session endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session
            Period: 60
            Stat: Sum

  Session5XXApiGwErrorCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Session5XXApiGwErrorCriticalAlarm"
      AlarmDescription: !Sub "There has been a significant proportion of 5XX errors on the Session endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session
            Period: 60
            Stat: Sum

  JsonWebKeys5XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-JsonWebKeysFunction5XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 5XX errors on the Json Web Keys endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /.well-known/jwks.json
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /.well-known/jwks.json
            Period: 60
            Stat: Sum

  JsonWebKeys5XXApiGwErrorCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-JsonWebKeys5XXApiGwErrorCriticalAlarm"
      AlarmDescription: !Sub "There has been a significant proportion of 5XX errors on the Json Web Keys endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<10,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /.well-known/jwks.json
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5XXError
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /.well-known/jwks.json
            Period: 60
            Stat: Sum

# BackEnd4xxAlarms

  UserInfo4XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-UserInfo4XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 4XX errors on the userInfo endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /userInfo
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4XXError
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /userInfo
            Period: 60
            Stat: Sum

  Token4XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Token4XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 4XX errors on the Token endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Resource
                  Value: /token
                - Name: Stage
                  Value: !Ref Environment
                - Name: Method
                  Value: POST
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4XXError
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Resource
                  Value: /token
                - Name: Stage
                  Value: !Ref Environment
                - Name: Method
                  Value: POST
            Period: 60
            Stat: Sum

  Authorization4XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Authorization4XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 4XX errors on the authorization endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /authorization
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4XXError
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /authorization
            Period: 60
            Stat: Sum

  SessionConfig4XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-SessionConfig4XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 4XX errors on the session-config endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "cic-cri-${AWS::StackName}"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session-config
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4XXError
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "cic-cri-${AWS::StackName}"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session-config
            Period: 60
            Stat: Sum

  ClaimedIdentity4XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ClaimedIdentity4XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 4XX errors on the Claimed Identity endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /claimedIdentity
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4XXError
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /claimedIdentity
            Period: 60
            Stat: Sum

  Session4XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Session4XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 4XX errors on the Session endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4XXError
              Dimensions:
                - Name: Method
                  Value: POST
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /session
            Period: 60
            Stat: Sum

  JsonWebKeys4XXApiGwErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-JsonWebKeys4XXApiGwErrorAlarm"
      AlarmDescription: !Sub "There has been a small proportion of 4XX errors on the Json Web Keys endpoint. ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<4 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /.well-known/jwks.json
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations)*100
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4XXError
              Dimensions:
                - Name: Method
                  Value: GET
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
                - Name: Stage
                  Value: !Ref Environment
                - Name: Resource
                  Value: /.well-known/jwks.json
            Period: 60
            Stat: Sum

# BackEndLatencyAlarm

  LatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-apiGWLatencyAlarm"
      AlarmDescription: !Sub "There has been increased latency on backend api-gateway. ${SupportManualURL}"
      ActionsEnabled: false  # disabled until we're ready for alarm actions to fire
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 2500
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: safeLatency
          Label: safeLatency
          ReturnData: true
          Expression: IF(invocations<10,0,maxLatency)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
            Period: 60
            Stat: Sum
        - Id: maxLatency
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Latency
              Dimensions:
                - Name: ApiName
                  Value: !Sub "${AWS::StackName} - CIC Credential Issuer Private API"
            Period: 60
            Stat: Maximum

# TxMAAlarms

  TXMASQSOldMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-TXMASQSOldMessagesAlarm"
      AlarmDescription: !Sub "Trigger an alarm when the age of the oldest TXMA message is 5 or more minutes. ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Statistic: Maximum
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TxMASQSQueue.QueueName
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 300
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  TXMADLQMessagesVisibleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-TXMADLQMessagesVisibleAlarm"
      AlarmDescription: !Sub "Trigger an alarm when message gets added to TXMA DLQ. ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Maximum
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TxMASQSQueueDeadLetterQueue.QueueName
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

# ConcurrencyAlarms

  UserInfoConcurrency80Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "ApplyReservedConcurrency"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger the alarm if over 80% of reserved concurrency is used. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-UserInfoFunction-concurrency"
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref UserInfoFunction
      Statistic: Maximum
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: !Ref LambdaConcurrencyThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
  
  TokenConcurrency80Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "ApplyReservedConcurrency"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger the alarm if over 80% of reserved concurrency is used. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-TokenFunction-concurrency"
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref TokenFunction
      Statistic: Maximum
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: !Ref LambdaConcurrencyThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
  
  AuthorizationConcurrency80Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "ApplyReservedConcurrency"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger the alarm if over 80% of reserved concurrency is used. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-AuthorizationFunction-concurrency"
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref AuthorizationFunction
      Statistic: Maximum
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: !Ref LambdaConcurrencyThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
  
  SessionConfigConcurrency80Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "ApplyReservedConcurrency"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger the alarm if over 80% of reserved concurrency is used. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-SessionConfigFunction-concurrency"
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref SessionConfigFunction
      Statistic: Maximum
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: !Ref LambdaConcurrencyThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  ClaimedIdentityConcurrency80Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "ApplyReservedConcurrency"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger the alarm if over 80% of reserved concurrency is used. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-ClaimedIdentityFunction-concurrency"
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref ClaimedIdentityFunction
      Statistic: Maximum
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: !Ref LambdaConcurrencyThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  SessionConcurrency80Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "ApplyReservedConcurrency"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger the alarm if over 80% of reserved concurrency is used. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-SessionFunction-concurrency"
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref SessionFunction
      Statistic: Maximum
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: !Ref LambdaConcurrencyThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  JsonWebKeysConcurrency80Alarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "ApplyReservedConcurrency"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger the alarm if over 80% of JsonWeb Keys concurrency is used. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-JsonWebKeysFunction-concurrency"
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref JsonWebKeysFunction
      Statistic: Maximum
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: !Ref LambdaConcurrencyThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

# Throttle alarms

  ClaimedIdentityThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger if the ${ClaimedIdentityFunction} lambda throttles. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-ClaimedIdentityFunction-throttles"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref ClaimedIdentityFunction
      TreatMissingData: notBreaching
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold

  SessionThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger if the ${SessionFunction} lambda throttles. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-SessionFunction-throttles"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref SessionFunction
      TreatMissingData: notBreaching
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold

  JsonWebKeysThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger if the ${JsonWebKeysFunction} lambda throttles. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-JsonWebKeysFunction-throttles"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref JsonWebKeysFunction
      TreatMissingData: notBreaching
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold

  AuthorizationThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger if the ${AuthorizationFunction} lambda throttles. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-AuthorizationFunction-throttles"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref AuthorizationFunction
      TreatMissingData: notBreaching
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
  
  SessionConfigThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger if the ${SessionConfigFunction} lambda throttles. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-SessionConfigFunction-throttles"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref SessionConfigFunction
      TreatMissingData: notBreaching
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold

  TokenThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger if the ${TokenFunction} lambda throttles. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-TokenFunction-throttles"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref TokenFunction
      TreatMissingData: notBreaching
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
  
  UserInfoThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger if the ${UserInfoFunction} lambda throttles. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-UserInfoFunction-throttles"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref UserInfoFunction
      TreatMissingData: notBreaching
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold


  LambdaTimeoutAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: []
      AlarmDescription: Trigger the alarm if any lambda in the account timesout 5 times within 5 minutes.
      AlarmName: !Sub "${AWS::StackName}-LambdaTimeoutAlarm"
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: a1
          Label: AcumulatedLambdaTimeOuts
          ReturnData: true
          Expression: (b1 + c1 + d1 + e1 + f1 + g1) >= 0
        - Id: b1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: !Sub "${AWS::StackName}/TimeOutLogMessages"
              MetricName: SessionLambdaTimeOut
            Period: 60
            Stat: Sum
        - Id: c1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: !Sub "${AWS::StackName}/TimeOutLogMessages"
              MetricName: ClaimedIdentityLambdaTimeOut
            Period: 60
            Stat: Sum
        - Id: d1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: !Sub "${AWS::StackName}/TimeOutLogMessages"
              MetricName: AuthorizationLambdaTimeOut
            Period: 60
            Stat: Sum        
        - Id: e1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: !Sub "${AWS::StackName}/TimeOutLogMessages"
              MetricName: TokenLambdaTimeOut
            Period: 60
            Stat: Sum
        - Id: f1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: !Sub "${AWS::StackName}/TimeOutLogMessages"
              MetricName: UserInfoLambdaTimeOut
            Period: 60
            Stat: Sum
        - Id: g1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: !Sub "${AWS::StackName}/TimeOutLogMessages"
              MetricName: JsonWebKeysLambdaTimeOut
            Period: 60
            Stat: Sum
        - Id: h1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: !Sub "${AWS::StackName}/TimeOutLogMessages"
              MetricName: SessionConfigLambdaTimeOut
            Period: 60
            Stat: Sum

  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      AlarmDescription: !Sub "Trigger the alarm if any lambda in the account throttles. ${SupportManualURL}"
      AlarmName: !Sub "${AWS::StackName}-LambdaThrottleAlarm"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      TreatMissingData: notBreaching
      Period: 60 # This is the minimum value for the AWS Namespace
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold

# JWTAlarms

  JWTErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: DeployAlarms
    Properties:
      LogGroupName: !Ref SessionFunctionLogGroup
      FilterPattern: '{ $.messageCode = "FAILED_VERIFYING_JWT" }'
      MetricTransformations:
        - 
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "CICJWTVerificationErrors"

  VerifyAuthorizeRequestFailedVerifyingJwtAlarm:
    DependsOn:
      - "JWTErrorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-VerifyAuthorizeRequestFailedVerifyingJwtAlarm"
      AlarmDescription: !Sub "FAILED_VERIFYING_JWT warning ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      MetricName: CICJWTVerificationErrors
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  VerifyAuthorizeRequestFailedVerifyingJwtCriticalAlarm:
    DependsOn:
      - "JWTErrorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-VerifyAuthorizeRequestFailedVerifyingJwtCriticalAlarm"
      AlarmDescription: !Sub "FAILED_VERIFYING_JWT critical ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      MetricName: CICJWTVerificationErrors
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 300
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

# Key aliases unavailable alarms

  KeyAliasesUnavailableMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: DeployAlarms
    Properties:
      LogGroupName: !Ref SessionFunctionLogGroup
      FilterPattern: '{ $.messageCode = "FAILED_DECRYPTING_JWE" }'
      MetricTransformations:
        - 
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "KeyAliasesUnavailable"

  KeyAliasesUnavailableAlarm:
    DependsOn:
      - "KeyAliasesUnavailableMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: DeployAlarms
    Properties:
      AlarmName: !Sub "${AWS::StackName}-KeyAliasesUnavailable"
      AlarmDescription: !Sub "FAILED_DECRYPTING_JWE critical ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-critical-alert
        # - !ImportValue platform-alarm-pagerduty-alert-topic
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
        # - !ImportValue platform-alarm-pagerduty-alert-topic
      InsufficientDataActions: [ ]
      MetricName: KeyAliasesUnavailable
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

# Alarm Dashboards

  ConcurrencyAlarmDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: ApplyReservedConcurrency
    Properties:
      DashboardName: !Sub '${AWS::StackName}-Concurrency-Alarm-Overview'
      DashboardBody:
        Fn::Sub: >
          {
            "widgets": [
              {
                "height": 6,
                  "width": 12,
                  "y": 0,
                  "x": 0,
                  "type": "metric",
                  "properties": {
                    "title": "session 80% Concurrency - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${SessionConcurrency80Alarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 0,
                  "x": 12,
                  "type": "metric",
                  "properties": {
                    "title": "Token 80% Concurrency - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${TokenConcurrency80Alarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 6,
                  "x": 0,
                  "type": "metric",
                  "properties": {
                    "title": "Authorization 80% Concurrency - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${AuthorizationConcurrency80Alarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 6,
                  "x": 0,
                  "type": "metric",
                  "properties": {
                    "title": "SessionConfig 80% Concurrency - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${SessionConfigConcurrency80Alarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 6,
                  "x": 12,
                  "type": "metric",
                  "properties": {
                    "title": "Claimed Identity 80% Concurrency - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${ClaimedIdentityConcurrency80Alarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 12,
                  "x": 0,
                  "type": "metric",
                  "properties": {
                    "title": "json Webkeys 80% Concurrency - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${JsonWebKeysConcurrency80Alarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 12,
                  "x": 12,
                  "type": "metric",
                  "properties": {
                    "title": "User Info 80% Concurrency - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${UserInfoConcurrency80Alarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                }
              }
            ]
          }

  ThrottlesAlarmDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: DeployAlarms
    Properties:
      DashboardName: !Sub '${AWS::StackName}-Throttles-Alarm-Overview'
      DashboardBody:
        Fn::Sub: >
          {
            "widgets": [
                {
                  "height": 6,
                  "width": 12,
                  "y": 0,
                  "x": 12,
                  "type": "metric",
                  "properties": {
                    "title": "Session Throttles - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${SessionThrottleAlarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 6,
                  "x": 0,
                  "type": "metric",
                  "properties": {
                    "title": "TokenThrottleAlarm - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${TokenThrottleAlarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 6,
                  "x": 12,
                  "type": "metric",
                  "properties": {
                    "title": "User Info Throttles - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${UserInfoThrottleAlarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 12,
                  "x": 0,
                  "type": "metric",
                  "properties": {
                    "title": "Authorization Throttles - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${AuthorizationThrottleAlarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 12,
                  "x": 0,
                  "type": "metric",
                  "properties": {
                    "title": "SessionConfig Throttles - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${SessionConfigThrottleAlarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 12,
                  "x": 0,
                  "type": "metric",
                  "properties": {
                    "title": "Claimed Identity Throttles - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${ClaimedIdentityThrottleAlarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                },
                {
                  "height": 6,
                  "width": 12,
                  "y": 12,
                  "x": 12,
                  "type": "metric",
                  "properties": {
                    "title": "json web keys Throttles - ${AWS::StackName}",
                    "annotations": {
                      "alarms": ["${JsonWebKeysThrottleAlarm.Arn}"]
                    },
                    "view": "timeSeries",
                    "stacked": false
                  }
                }
              ]
            }

  CriticalAlarmDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: DeployAlarms
    Properties:
      DashboardName: !Sub '${AWS::StackName}-Critical-Alarm-Overview'
      DashboardBody:
        Fn::Sub: >
          {
          "widgets": [
              {
                "height": 6,
                "width": 12,
                "y": 6,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "API Gateway 5XX critical - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${5XXErrorCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 12,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "Claimed Identity 5XX critical - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${ClaimedIdentity5XXApiGwErrorCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 12,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "User Info 5XX critical - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${UserInfo5XXApiGwErrorCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 12,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Token 5XX critical - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${Token5XXApiGwErrorCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 12,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Authorization 5XX critical - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${Authorization5XXApiGwErrorCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 12,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "SessionConfig 5XX critical - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${SessionConfig5XXApiGwErrorCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 12,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Session 5XX critical - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${Session5XXApiGwErrorCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 12,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "JsonWebKeys 5XX critical - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${JsonWebKeys5XXApiGwErrorCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              }
            ]
          }

  WarningAlarmDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: DeployAlarms
    Properties:
      DashboardName: !Sub '${AWS::StackName}-Warning-Alarm-Overview'
      DashboardBody:
        Fn::Sub: >
          {
            "widgets": [
              {
                "height": 6,
                "width": 12,
                "y": 0,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "Latency Alarm - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${LatencyAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 6,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "5XX Error Alarm - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${5XXErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 12,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Claimed Identity 5XX ApiGw Error - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${ClaimedIdentity5XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 18,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "User Info 5XX ApiGw Error - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${UserInfo5XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 24,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "Token 5XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${Token5XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 24,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Authorization 5XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${Authorization5XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 24,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "SessionConfig 5XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${SessionConfig5XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 30,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "Session 5XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${Session5XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 30,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Json Web Keys 5XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${JsonWebKeys5XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 36,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Claimed Identity 4XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${ClaimedIdentity4XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 42,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "UserInfo 4XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${UserInfo4XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 42,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Token 4XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${Token4XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 48,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "Authorization 4XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${Authorization4XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 48,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "SessionConfig 4XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${SessionConfig4XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 48,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "Session 4XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${Session4XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 54,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "Json Web Keys 4XX - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${JsonWebKeys4XXApiGwErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 66,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "TXMA SQS Old Messages - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${TXMASQSOldMessagesAlarm.Arn}"]
                     },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 66,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "TXMA DLQ Messages Visible - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${TXMADLQMessagesVisibleAlarm.Arn}"]
                     },
                  "view": "timeSeries",
                  "stacked": false
                }
              }
            ]
          }

Outputs:
  CICApiGatewayId:
    Description: "API GatewayID of the CIC CRI API"
    Value: !Sub "${CICRestApi}"
    Export:
      Name: !Sub ${AWS::StackName}-CICApiGatewayId
  CICBackendURL:
    Description: "CIC Backend URL"
    Value: !Sub
      - "https://${CustomDomainName}"
      - CustomDomainName: !Ref CICApiCustomDomainName
    Export:
      Name: !Sub ${AWS::StackName}-CICBackendURL
  CICIPVStubExecuteURL:
    Condition: IsNotProdLikeEnvironment
    Description: "CIC IPV Stub"
    Value:
      Fn::ImportValue: !Sub '${IPVStubStackName}-IPVStubExecuteUrl'
  TxMASQSQueue: 
    Description: "Arn of the TxMASQSQueue"
    Value: !GetAtt TxMASQSQueue.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TxMASQSQueue-arn
  TxMAKMSEncryptionKey: 
    Description: "Arn of the TxMAKMSEncryptionKey"
    Value: !GetAtt TxMAKMSEncryptionKey.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TxMAKMSEncryptionKey-arn
  SessionTableARN: 
    Description: "Arn of the Session DynamoDB table"
    Value:
      Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-arn"
    Export:
      Name: !Sub ${AWS::StackName}-SessionTable-arn
  SessionTableEcryptionARN: 
    Description: "Arn of the SessionTableEncryptionKey"
    Value:
      Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-key-arn"
    Export:
      Name: !Sub ${AWS::StackName}-SessionTableEncryptionKey-arn
  PersonIdentityTableARN: 
    Description: "Arn of the Person Identity DynamoDB table"
    Value:
      Fn::ImportValue: !Sub "${L2DynamoStackName}-person-identity-table-arn"
    Export:
      Name: !Sub ${AWS::StackName}-PersonIdentityTable-arn
  PersonIdentityTableEncryptionARN: 
    Description: "Arn of the PersonTableEncryptionKey"
    Value:
      Fn::ImportValue: !Sub "${L2DynamoStackName}-person-identity-table-key-arn"
    Export:
      Name: !Sub ${AWS::StackName}-PersonIdentityTableEncryptionKey-arn
  CICTestHarnessURL:
    Condition: IsNotProdLikeEnvironment
    Description: "CIC Test Harness"
    Value: !FindInMap [EnvironmentVariables, !Ref Environment, TESTHARNESSURL]
  VcSigningKeyId:
    Condition: IsNotProdLikeEnvironment
    Description: "Signing Key used to sign VC"
    Value:
      Fn::ImportValue: !Sub "${L2KMSStackName}-vc-signing-key-id"
  DNSSuffix:
    Condition: IsNotProdLikeEnvironment
    Description: "CIC DNS Suffix"
    Value: !FindInMap [EnvironmentVariables, !Ref Environment, DNSSUFFIX]
  SessionTableName:
    Condition: IsNotProdLikeEnvironment
    Description: "CIC Session Table Name"
    Value:
      Fn::ImportValue: !Sub "${L2DynamoStackName}-session-table-name"
    Export:
      Name: !Sub ${AWS::StackName}-SessionTable-name
